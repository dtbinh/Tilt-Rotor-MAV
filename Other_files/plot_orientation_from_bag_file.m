%% plot_orientation_error:
clear all;
close all;
bag = rosbag('/home/luca/git/Master_Thesis/bag/n=6_Circlel_beta0.bag');
bagOdom = select(bag, 'Topic', '/optimal_drone_n6/odometry_sensor1/pose');
Odomx = timeseries(bagOdom, 'Orientation.X');
Odomy = timeseries(bagOdom, 'Orientation.Y');
Odomz = timeseries(bagOdom, 'Orientation.Z');
Odomw = timeseries(bagOdom, 'Orientation.W');
Odom_time = Odomx.Time;
Odomx =  Odomx.Data;
Odomy =  Odomy.Data;
Odomz =  Odomz.Data;
Odomw =  Odomw.Data;

i0 = find(Odom_time<5);
iend = find(Odom_time>32);
Odom_time([i0; iend]) = [];
Odomx([i0; iend]) = [];
Odomy([i0; iend]) = [];
Odomz([i0; iend]) = [];
Odomw([i0; iend]) = [];

[Odom_yaw,Odom_pitch,Odom_roll] = quat2angle([Odomw Odomx Odomy Odomz], 'ZXY');


% [eul] = quat2eul([Odomw Odomx Odomy Odomz], 'ZYZ');
% Odom_yaw = eul(:,1);
% Odom_pitch = eul(:,2);
% Odom_roll = eul(:,3);
% mod(Odom_yaw+3*pi, 2*pi);
% Odom_yaw(47:492) = Odom_yaw(47:492) - 2*pi;

YAW = Odom_yaw;
PITCH = Odom_roll;
ROLL = Odom_pitch;

set(0,'defaulttextinterpreter','latex');
figure('Units', 'pixels', ...
    'Position', [100 100 800 600]);
hold on;

Xodom  = line(Odom_time, YAW);
Yodom   = line(Odom_time, PITCH);
Zodom = line (Odom_time, ROLL);
set(Xodom                        , ...
 'LineWidth'       , 1                  , ... 
 'Color'           , [0 0 .7]    );

set(Yodom                          , ...
  'LineWidth'       , 1                  , ...
  'Color'           , [.7 0 0]  );

set(Zodom                          , ...
  'LineWidth'       , 1                  , ...
  'Color'           , [0 .7 .7]  );

XLabel = xlabel('Time [s]');
YLabel = ylabel('Angle error [rad]'); 
Title = title('Euler angles error while describing a circle');
Legend = legend( ...
  [Xodom,Yodom, Zodom], ...
  '\phi_{err}'       , ...
  '\theta_{err}'        , ...
  '\psi_{err}'      , ...
  'location', 'NorthEast' );
set(gca, ...
  'Box'         , 'off'     , ...
  'TickDir'     , 'out'     , ...
  'TickLength'  , [.02 .02] , ...
  'XMinorTick'  , 'on'      , ...
  'YMinorTick'  , 'on'      , ...
  'YGrid'       , 'on'      , ...
  'XColor'      , [.3 .3 .3], ...
  'YColor'      , [.3 .3 .3], ...
  'LineWidth'   , 1         );
set([XLabel, YLabel, Legend], ...
    'FontName'   , 'Modern No. 20' , ...
    'FontWeight' , 'normal'      );
set(Title, ...
    'FontName'   , 'Modern No. 20' , ...
    'FontWeight' , 'bold'      );
set([Legend, gca]             , ...
    'FontSize'   , 20        );
set([XLabel, YLabel]  , ...
    'FontSize'   , 20          );
set( Title                    , ...
    'FontSize'   , 30         , ...
    'FontWeight' , 'normal'   );

%% plot position tracking:
Odomx = timeseries(bagOdom, 'Position.X');
Odomy = timeseries(bagOdom, 'Position.Y');
Odomz = timeseries(bagOdom, 'Position.Z');
Odomx =  Odomx.Data;
Odomy =  Odomy.Data;
Odomz =  Odomz.Data;

Odomx([i0; iend]) = [];
Odomy([i0; iend]) = [];
Odomz([i0; iend]) = [];
%% commande
bag_com = select(bag, 'Topic', '/optimal_drone_n6/command/trajectory');
offset = bag_com.StartTime;

n = 200; % number of steps
angle = 2*pi/n;
time_per_tour = 10; %[s]
afterset = 300;
ramp_time = 2; % [s]
n_ramp = 80; % number of steps

steps_before = round(offset/time_per_tour*n);

x = zeros(steps_before + n_ramp + 2*n + afterset,1);
y = zeros(steps_before + n_ramp + 2*n + afterset,1);
time = zeros(steps_before + n_ramp + 2*n + afterset,1);
z = zeros(steps_before + n_ramp + 2*n + afterset,1);
for i = 1:steps_before
    time(i)= i*offset/steps_before; % [s]
    z(i) = 0.05;
end
time_diff = time(steps_before)-steps_before*ramp_time/n_ramp;
for i = steps_before:steps_before+n_ramp
    x(i) = (i- steps_before)/n_ramp;
    z(i) = 0.05 +0.95*(i-steps_before)/n_ramp; 
    time(i)= time_diff +  i*ramp_time/n_ramp; % [s]
end
time_diff = time(steps_before+n_ramp)- (steps_before+n_ramp)*time_per_tour/n;
for i = steps_before+n_ramp:steps_before+2*n+n_ramp
    x(i) = cos((i-steps_before-n_ramp)*angle);
    y(i) = sin((i-steps_before-n_ramp)*angle);
    z(i) = 1;
    time(i)= time_diff+ i*time_per_tour/n; % [s]
end
for i = steps_before+n_ramp+2*n:steps_before+n_ramp+2*n+afterset
    time(i)= time_diff+time_per_tour/n*i; % [s]
    x(i) = 1;
    z(i) = 1; 
end
i0 = find(time<5);
iend = find(time>32);
time([i0; iend]) = [];
x([i0; iend]) = [];
y([i0; iend]) = [];
z([i0; iend]) = [];

set(0,'defaulttextinterpreter','latex');
figure('Units', 'pixels', ...
    'Position', [100 100 800 600]);
hold on;
Odom_time = Odom_time -0.15;
Xodom  = line(Odom_time, Odomx);
Yodom   = line(Odom_time, Odomy);
Zodom = line (Odom_time, Odomz);

Xdes = line(time, x);
Ydes   = line(time, y);
Zdes = line (time, z);
set(Xodom                        , ...
 'LineWidth'       , 1                  , ... 
 'Color'           , [0 0 .4]    );

set(Yodom                          , ...
  'LineWidth'       , 1                  , ...
  'Color'           , [.4 0 0]  );

set(Zodom                          , ...
  'LineWidth'       , 1                  , ...
  'Color'           , [0 .4 .4]  );

set(Xdes                        , ...
 'LineWidth'       , 1                  , ... 
 'Color'           , [0 0 1]    );

set(Ydes                          , ...
  'LineWidth'       , 1                  , ...
  'Color'           , [1 0 0]  );

set(Zdes                          , ...
  'LineWidth'       , 1                  , ...
  'Color'           , [0 1 1]  );

XLabel = xlabel('Time [s]');
YLabel = ylabel('Position [m]'); 
Title = title('Position tracking circle');
Legend = legend( ...
  [Xodom,Yodom, Zodom, Xdes, Ydes, Zdes], ...
  'P_{real,x}'       , ...
  'P_{real,y}'        , ...
  'P_{real,z}'      , ...
  'P_{des,x}'       , ...
  'P_{des,y}'        , ...
  'P_{des,z}'      , ...
  'location', 'NorthEast' );
set(gca, ...
  'Box'         , 'off'     , ...
  'TickDir'     , 'out'     , ...
  'TickLength'  , [.02 .02] , ...
  'XMinorTick'  , 'on'      , ...
  'YMinorTick'  , 'on'      , ...
  'YGrid'       , 'on'      , ...
  'XColor'      , [.3 .3 .3], ...
  'YColor'      , [.3 .3 .3], ...
  'YTick'       , -1:0.5:1, ...
  'LineWidth'   , 1         );
set([XLabel, YLabel, Legend], ...
    'FontName'   , 'Modern No. 20' , ...
    'FontWeight' , 'normal'      );
set(Title, ...
    'FontName'   , 'Modern No. 20' , ...
    'FontWeight' , 'bold'      );
set([Legend, gca]             , ...
    'FontSize'   , 20        );
set([XLabel, YLabel]  , ...
    'FontSize'   , 20          );
set( Title                    , ...
    'FontSize'   , 30         , ...
    'FontWeight' , 'normal'   );